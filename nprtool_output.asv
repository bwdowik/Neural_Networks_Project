% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 05-Apr-2019 22:44:06
%
% This script assumes these variables are defined:
%
%   x - input data.
%   t - target data.

%% Setting up training data
clear all
clc

N = 20; % number of data points of each class 
offset = 5; % rough measure of distance between classes 
x = [randn(2,N-2) [0;7] [7;0] randn(2,N)+offset]; % inputs 
t(1,:) = [zeros(1,N) ones(1,N)]; % outputs
t(2,:) = [ones(1,N) zeros(1,N)]; % outputs

load('basic_parkinsons.mat');
training_outputs(2,:) = -training_outputs(1,:)+1;

x = training_inputs;
t = training_outputs;

%% neural network stuff

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

y=round(y);
% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)


%% trying to plot data and decision boundary
figure(1)
decisionBoundary(net,training_inputs)
scatter(x(1,1:N),x(2,1:N),'b*') %plot 1st half training data
scatter(x(1,N+1:2*N),x(2,N+1:2*N),'r*') %plot 2nd half training data
hold off


function decisionBoundary(net,inputData)

xmin = min(training_inputs(1,:));
xmax = max(training_inputs(1,:));
ymin min(training_inputs(1,:));
ymax
dx
dy

xlim([xmin xmax])
ylim([ymin ymax])
hold on;
for x=xmin:dx:xmax
	for y=ymin:dy:ymax
		answer = net([x y]');
		if answer(1) > 0.5
			plot(x,y,'oy', "markersize", 20)
		else
			plot(x,y,'og', "markersize", 20)
		end
		hold on;
	end
end
 
end
                     

